openapi: 3.0.1
info:
  title: ProductsAPI
  version: 1.0.0

paths:
  /product:
    post:
      responses:
        200:
          description: OK
        400:
          description: BAD REQUEST
        500:
          description: INTERNAL ERROR
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequestSchema"
      x-amazon-apigateway-integration:
        type: "aws"
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem",
          }
        # credentials: TableArn
        credentials: { "Fn::GetAtt": [ProductsApiRole, Arn] }
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "Key": {
                    "PK": {
                      "S": $input.json('$.PK')
                    },
                    "SK": {
                      "S": $input.json('$.SK')
                    }
                  },
                  "UpdateExpression": "SET #Type = :Type, #Price = :Price",
                  "ExpressionAttributeNames": {
                    "#Type": "Type",
                    "#Price": "Price"
                  },
                  "ExpressionAttributeValues": {
                    ":Type": {
                      "S": $input.json('$.Type')
                    },
                    ":Price": {
                      "N": $input.json('$.Price')
                    }
                  },
                  "ReturnValues": "ALL_NEW"
                }
              - { tableName: { Ref: TableName } }
        responses:
          "200":
            statusCode: "200"
            responseTemplates:
              application/json: '{"Message":"Update successful"}'
          "400":
            statusCode: "400"
            responseTemplates:
              application/json: '{"Error":"Bad Request"}'
          "500":
            statusCode: "500"
            responseTemplates:
              application/json: '{"Error":"Internal Server Error"}'

  /listato/{Brand}:
    get:
      responses:
        "200":
          description: OK
        "400":
          description: BAD REQUEST
        "500":
          description: INTERNAL ERROR
      x-amazon-apigateway-integration:
        type: "aws"
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query",
          }
        credentials: { "Fn::GetAtt": [ProductsApiRole, Arn] }
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "KeyConditionExpression": "PK = :Product AND begins_with(SK, :Brand)",
                  "ExpressionAttributeValues": {
                    ":Product": {
                      "S": "Product"
                    },
                    ":Brand": {
                      "S": "$input.params('Brand')"
                    }
                  }
                }
              - { tableName: { Ref: TableName } }
        responses:
          "200":
            statusCode: "200"
            responseTemplates:
              application/json: '{"Message":"Operation successful"}'
          "400":
            statusCode: "400"
            responseTemplates:
              application/json: '{"Error":"Bad Request"}'
          "500":
            statusCode: "500"
            responseTemplates:
              application/json: '{"Error":"Internal Server Error"}'

  /products/{PK}/{SK}:
    get:
      responses:
        "200":
          description: OK
        "400":
          description: BAD REQUEST
        "500":
          description: INTERNAL ERROR
      x-amazon-apigateway-integration:
        type: "aws"
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem",
          }
        credentials: { "Fn::GetAtt": [ProductsApiRole, Arn] }
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "Key": {
                    "PK": {
                      "S": "$input.params('PK')"
                    },
                    "SK": {
                      "S": "$input.params('SK')"
                    }
                  }
                }
              - { tableName: { Ref: TableName } }
        responses:
          "200":
            statusCode: "200"
            responseTemplates:
              application/json: |
                #if ($input.path("$") == {})
                {
                  'Message': 'L'oggetto cercato non Ã¨ presente nel database'
                }
                #else
                {
                  "Brand": $input.json('$.Item.SK.S'),
                  "Type": $input.json('$.Item.Type.S'),
                  "Price": $input.json('$.Item.Price.N')
                }
                #end
          "400":
            statusCode: "400"
            responseTemplates:
              application/json: '{"Error":"Bad Request"}'
          "500":
            statusCode: "500"
            responseTemplates:
              application/json: '{"Error":"Internal Server Error"}'

components:
  schemas:
    PostRequestSchema:
      type: object
      properties:
        PK:
          type: string
        SK:
          type: string
        Type:
          type: string
        Price:
          type: number
      required:
        - PK
        - SK
