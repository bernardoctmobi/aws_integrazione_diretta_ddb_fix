openapi: 3.0.1
info:
  title: ProductsAPI
  version: 1.0.0

paths:
  /product:
    post:
      responses:
        200:
          description: OK
        400:
          description: BAD REQUEST
        500:
          description: INTERNAL ERROR
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequestSchema"
      x-amazon-apigateway-integration:
        type: "aws"
        uri:
          {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem",
          }
        # credentials: TableArn
        credentials: { "Fn::GetAtt": [ProductsApiRole, Arn] }
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub:
              - |-
                {
                  "TableName": "${tableName}",
                  "Key": {
                    "PK": {
                      "S": $input.json('$.PK')
                    },
                    "SK": {
                      "S": $input.json('$.SK')
                    }
                  },
                  "UpdateExpression": "SET #Type = :Type, #Price = :Price",
                  "ExpressionAttributeNames": {
                    "#Type": "Type",
                    "#Price": "Price"
                  },
                  "ExpressionAttributeValues": {
                    ":Type": {
                      "S": $input.json('$.Type')
                    },
                    ":Price": {
                      "N": $input.json('$.Price')
                    }
                  },
                  "ReturnValues": "ALL_NEW"
                }
              - { tableName: { Ref: TableName } }
        responses:
          "200":
            statusCode: "200"
            responseTemplates:
              application/json: '{"Message":"Update successful"}'
          "400":
            statusCode: "400"
            responseTemplates:
              application/json: '{"Error":"Bad Request"}'
          "500":
            statusCode: "500"
            responseTemplates:
              application/json: '{"Error":"Internal Server Error"}'
  # /carmodels/{PK}/{SK}:
  #   get:
  #     responses:
  #       "200":
  #         description: OK
  #       "400":
  #         description: BAD REQUEST
  #       "500":
  #         description: INTERNAL ERROR
  #     x-amazon-apigateway-integration:
  #       type: "aws"
  #       uri:
  #         {
  #           "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem",
  #         }
  #       credentials: { "Fn::GetAtt": [CarModelsApiRole, Arn] }
  #       httpMethod: "POST"
  #       requestTemplates:
  #         application/json:
  #           Fn::Sub:
  #             - |-
  #               {
  #                 "TableName": "${tableName}",
  #                 "Key": {
  #                   "PK": {
  #                     "S": "$input.params('PK')"
  #                   },
  #                   "SK": {
  #                     "N": "$input.params('SK')"
  #                   }
  #                 }
  #               }
  #             - { tableName: { Ref: TableName } }
  #       responses:
  #         "200":
  #           statusCode: "200"
  #           responseTemplates:
  #             application/json: |
  #               #if ($input.path("$") == {})
  #               {
  #                 'Message': 'L'oggetto cercato non Ã¨ presente nel database'
  #               }
  #               #else
  #               {
  #                 "Brand": $input.json('$.Item.brand.S'),
  #                 "Model": $input.json('$.Item.model.S'),
  #                 "Year": $input.json('$.Item.SK.N')
  #               }
  #               #end
  #         "400":
  #           statusCode: "400"
  #           responseTemplates:
  #             application/json: '{"Error":"Bad Request"}'
  #         "500":
  #           statusCode: "500"
  #           responseTemplates:
  #             application/json: '{"Error":"Internal Server Error"}'

components:
  schemas:
    PostRequestSchema:
      type: object
      properties:
        PK:
          type: string
        SK:
          type: string
        Type:
          type: string
        Price:
          type: number
      required:
        - PK
        - SK
